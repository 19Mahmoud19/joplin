import { execCommand2, execCommandVerbose, rootDir } from './tool-utils';
const { DatabaseDriverNode } = require('@joplin/lib/database-driver-node.js');

const sqlts = require('@rmp135/sql-ts').default;
const fs = require('fs-extra');
const sqlite3 = require('sqlite3').verbose();


// public static TYPE_UNKNOWN = 0;
// public static TYPE_INT = 1;
// public static TYPE_TEXT = 2;
// public static TYPE_NUMERIC = 3;
// function typeStringToTypeId(s:string):number {
// 	s = s.toLowerCase();
// 	if (s === 'int') return 1;
// 	if (s === 'integer') return 1;
// 	if (s === 'text') return 2;
// 	if (s === 'numeric') return 3;
// 	throw new Error('Unsupported type: ' + s);
// }

// function createRuntimeObject(table: any) {
// 	const output:any[] = [];
// 	for (const col of table.columns) {
// 		output.push({
// 			name: col.propertyName,
// 			type: typeStringToTypeId(col.type),
// 			default: '',
// 		});
// 	}

// 	// console.info(table.columns);

// 	return output;

// 	// const colStrings = [];
// 	// for (const col of table.columns) {
// 	// 	const name = col.propertyName;
// 	// 	const type = col.propertyType;
// 	// 	colStrings.push(`\t\t${name}: { type: '${type}' },`);
// 	// }

// 	// return `\t${table.name}: {\n${colStrings.join('\n')}\n\t},`;
// }

async function main() {
	// Run the CLI app once so as to generate the database file
	process.chdir(`${rootDir}/packages/app-cli`);
	await execCommand2('npm start -- version');

	const sqlTsConfig = {
		'client': 'sqlite3',
		'connection': {
			'filename': `${require('os').homedir()}/.config/joplindev-desktop/database.sqlite`,
		},
		'tableNameCasing': 'pascal',
		'singularTableNames': true,
		'useNullAsDefault': true, // To disable warning "sqlite does not support inserting default values"
		'excludedTables': [
			'main.notes_fts',
			'main.notes_fts_segments',
			'main.notes_fts_segdir',
			'main.notes_fts_docsize',
			'main.notes_fts_stat',
		],
	};

	const definitions = await sqlts.toObject(sqlTsConfig);

	// console.info('DEF', definitions);

	// const tableDefs:any = {};
	// for (const table of definitions.tables) {
	// 	tableDefs[table.name] = createRuntimeObject(table);
	// }

	// // console.info(tableDefs);

	const tsString = sqlts.fromObject(definitions, sqlTsConfig)
		.replace(/": /g, '"?: ');
	const header = `// AUTO-GENERATED BY ${__filename.substr(rootDir.length + 1)}`;

	const targetFile = `${rootDir}/packages/lib/services/database/types.ts`;
	console.info(`Writing type definitions to ${targetFile}...`);
	await fs.writeFile(targetFile, `${header}\n\n${tsString}`, 'utf8');

	// const tableFieldsPath = `${rootDir}/packages/lib/services/database/tableFields.ts`;
	// await execCommand2(`npm start -- dumptablefields "${tableFieldsPath}"`);
}

main().catch((error) => {
	console.error(error);
	process.exit(1);
});
